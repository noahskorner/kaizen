name: Kaizen CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0

      - name: Install Dependencies
        run: npm ci

      # - name: Retrieve database credentials from AWS Secrets Manager
      #   id: retrieve-db-credentials
      #   run: |
      #     SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.AWS_DATABASE_SECRET_ID }} --region ${{ secrets.AWS_REGION }} --query SecretString --output text)
      #     echo "$SECRET_STRING" > secret.json
      #     DATABASE_URL=$(jq -r '.DATABASE_URL' secret.json)
      #     echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Security Group Ingress Rule
        run: |
          SECURITY_GROUP_ID=${{ secrets.AWS_DATABASE_SECURITY_GROUP_ID }}
          MY_IP=$(curl -s http://checkip.amazonaws.com)

          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 5432 \
            --cidr ${MY_IP}/32

      - name: Run Prisma migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
            --service ${{ secrets.AWS_ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0

      - name: Install Dependencies
        run: npm ci

      - name: Build frontend
        run: |
          cd apps/frontend
          npm run build:production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync apps/frontend/dist s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete --region ${{ secrets.AWS_REGION }}

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
