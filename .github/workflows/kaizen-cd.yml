name: Kaizen CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0

      - name: Install Dependencies
        run: npm ci

      - name: Retrieve database credentials from AWS Secrets Manager
        run: |
          SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.AWS_SECRET_ID }} --region ${{ secrets.AWS_REGION }} --query SecretString --output text)
          echo "$SECRET_STRING" > secret.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up database environment variables
        run: |
          export DATABASE_URL=$(jq -r '.DATABASE_URL' secret.json)

      - name: Run Prisma migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # - name: Log in to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Build and push Docker image to ECR
      #   run: |
      #     IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
      #     docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
      #     docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
      #     docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      # - name: Deploy to ECS
      #   run: |
      #     aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --force-new-deployment --region ${{ secrets.AWS_REGION }}

      # - name: Build frontend
      #   run: npm run build --prefix frontend

      # - name: Deploy to S3
      #   run: |
      #     aws s3 sync frontend/build s3://${{ secrets.S3_BUCKET_NAME }} --delete --region ${{ secrets.AWS_REGION }}

      # - name: Invalidate CloudFront cache
      #   run: |
      #     aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
