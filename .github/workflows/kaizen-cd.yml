name: Kaizen CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0

      - name: Install Dependencies
        run: npm ci

      # - name: Retrieve database credentials from AWS Secrets Manager
      #   id: retrieve-db-credentials
      #   run: |
      #     SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.AWS_DATABASE_SECRET_ID }} --region ${{ secrets.AWS_REGION }} --query SecretString --output text)
      #     echo "$SECRET_STRING" > secret.json
      #     DATABASE_URL=$(jq -r '.DATABASE_URL' secret.json)
      #     echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Security Group Ingress Rule
        run: |
          SECURITY_GROUP_ID=${{ secrets.AWS_DATABASE_SECURITY_GROUP_ID }}
          MY_IP=$(curl -s http://checkip.amazonaws.com)

          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 3306 \
            --cidr ${MY_IP}/32

      - name: Run Prisma migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Update ECS Task Definition
        id: task-def
        run: |
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition ${{ secrets.AWS_ECS_TASK_DEFINITION }} --region ${{ secrets.AWS_REGION }})
          NEW_TASK_DEF=$(echo $TASK_DEFINITION_JSON | jq --arg IMAGE "${{ secrets.AWS_ECR_REPOSITORY_URL }}:latest" \
            --arg NODE_ENV "${{ secrets.NODE_ENV}}" \
            --arg DATABASE_URL "${{ secrets.DATABASE_URL}}" \
            --arg ACCESS_TOKEN_SECRET "${{ secrets.ACCESS_TOKEN_SECRET}}" \
            --arg ACCESS_TOKEN_EXPIRATION "${{ secrets.ACCESS_TOKEN_EXPIRATION}}" \
            --arg REFRESH_TOKEN_SECRET "${{ secrets.REFRESH_TOKEN_SECRET}}" \
            --arg REFRESH_TOKEN_EXPIRATION "${{ secrets.REFRESH_TOKEN_EXPIRATION}}" \
            --arg REFRESH_TOKEN_COOKIE_DOMAIN "${{ secrets.REFRESH_TOKEN_COOKIE_DOMAIN}}" \
            --arg UPDATE_EMAIL_SECRET "${{ secrets.UPDATE_EMAIL_SECRET}}" \
            --arg UPDATE_EMAIL_EXPIRATION "${{ secrets.UPDATE_EMAIL_EXPIRATION}}" \
            --arg FORGOT_PASSWORD_SECRET "${{ secrets.FORGOT_PASSWORD_SECRET}}" \
            --arg FORGOT_PASSWORD_EXPIRATION "${{ secrets.FORGOT_PASSWORD_EXPIRATION}}" \
            --arg API_PORT "${{ secrets.API_PORT}}" \
            --arg API_DOMAIN "${{ secrets.API_DOMAIN}}" \
            --arg FRONTEND_DOMAIN "${{ secrets.FRONTEND_DOMAIN}}" \
            --arg PLAID_CLIENT_ID "${{ secrets.PLAID_CLIENT_ID}}" \
            --arg PLAID_SECRET "${{ secrets.PLAID_SECRET}}" \
            --arg OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY}}" \
            --arg AWS_ACCESS_KEY_ID "${{ secrets.AWS_ACCESS_KEY_ID}}" \
            --arg AWS_SECRET_ACCESS_KEY "${{ secrets.AWS_SECRET_ACCESS_KEY}}" \
            --arg AWS_REGION "${{ secrets.AWS_REGION}}" \
            --arg AWS_CERTIFICATE_ARN_US_EAST_1 "${{ secrets.AWS_CERTIFICATE_ARN_US_EAST_1}}" \
            --arg AWS_CERTIFICATE_ARN_US_EAST_2 "${{ secrets.AWS_CERTIFICATE_ARN_US_EAST_2}}" \
            --arg AWS_ACCOUNT_ID "${{ secrets.AWS_ACCOUNT_ID}}" \
            --arg AWS_DATABASE_SECRET_ID "${{ secrets.AWS_DATABASE_SECRET_ID}}" \
            --arg OPEN_EXCHANGE_RATE_APP_ID "${{ secrets.OPEN_EXCHANGE_RATE_APP_ID}}"
            '.taskDefinition.containerDefinitions[0].image=$IMAGE |
            .taskDefinition.containerDefinitions[0].environment=[
              { "name": "NODE_ENV", "value": $NODE_ENV },
              { "name": "DATABASE_URL", "value": $DATABASE_URL },
              { "name": "ACCESS_TOKEN_SECRET", "value": $ACCESS_TOKEN_SECRET },
              { "name": "ACCESS_TOKEN_EXPIRATION", "value": $ACCESS_TOKEN_EXPIRATION },
              { "name": "REFRESH_TOKEN_SECRET", "value": $REFRESH_TOKEN_SECRET },
              { "name": "REFRESH_TOKEN_EXPIRATION", "value": $REFRESH_TOKEN_EXPIRATION },
              { "name": "REFRESH_TOKEN_COOKIE_DOMAIN", "value": $REFRESH_TOKEN_COOKIE_DOMAIN },
              { "name": "UPDATE_EMAIL_SECRET", "value": $UPDATE_EMAIL_SECRET },
              { "name": "UPDATE_EMAIL_EXPIRATION", "value": $UPDATE_EMAIL_EXPIRATION },
              { "name": "FORGOT_PASSWORD_SECRET", "value": $FORGOT_PASSWORD_SECRET },
              { "name": "FORGOT_PASSWORD_EXPIRATION", "value": $FORGOT_PASSWORD_EXPIRATION },
              { "name": "API_PORT", "value": $API_PORT },
              { "name": "API_DOMAIN", "value": $API_DOMAIN },
              { "name": "FRONTEND_DOMAIN", "value": $FRONTEND_DOMAIN },
              { "name": "PLAID_CLIENT_ID", "value": $PLAID_CLIENT_ID },
              { "name": "PLAID_SECRET", "value": $PLAID_SECRET },
              { "name": "OPENAI_API_KEY", "value": $OPENAI_API_KEY },
              { "name": "AWS_ACCESS_KEY_ID", "value": $AWS_ACCESS_KEY_ID },
              { "name": "AWS_SECRET_ACCESS_KEY", "value": $AWS_SECRET_ACCESS_KEY },
              { "name": "AWS_REGION", "value": $AWS_REGION },
              { "name": "AWS_CERTIFICATE_ARN_US_EAST_1", "value": $AWS_CERTIFICATE_ARN_US_EAST_1 },
              { "name": "AWS_CERTIFICATE_ARN_US_EAST_2", "value": $AWS_CERTIFICATE_ARN_US_EAST_2 },
              { "name": "AWS_ACCOUNT_ID", "value": $AWS_ACCOUNT_ID },
              { "name": "AWS_DATABASE_SECRET_ID", "value": $AWS_DATABASE_SECRET_ID },
              { "name": "OPEN_EXCHANGE_RATE_APP_ID", "value": $OPEN_EXCHANGE_RATE_APP_ID },
            ]')
          echo "$NEW_TASK_DEF" > task-def.json

      - name: Register new task definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-def.json \
            --region ${{ secrets.AWS_REGION }}

      - name: Deploy new task definition to ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
            --service ${{ secrets.AWS_ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Build frontend
        run: cd frontend && npm run build:production

      - name: Deploy to S3
        run: |
          aws s3 sync dist s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete --region ${{ secrets.AWS_REGION }}

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
