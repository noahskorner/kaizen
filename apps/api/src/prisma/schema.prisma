// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User
model UserRecord {
  id           String              @id @default(uuid()) @map("id")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @default(now()) @updatedAt @map("updated_at")
  email        String              @unique @map("email")
  password     String              @map("password")
  institutions InstitutionRecord[]
  transactions TransactionRecord[]
  wallet       WalletRecord?

  @@index([email])
  @@map("user")
}

// Institution
model InstitutionRecord {
  id               String              @id @default(uuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt
  plaidAccessToken String
  plaidCursor      String?             @map("plaidCursor")
  userId           String
  user             UserRecord          @relation(fields: [userId], references: [id])
  accounts         AccountRecord[]
  transactions     TransactionRecord[]

  @@map("institution")
}

// Account
enum AccountRecordType {
  Investment
  Credit
  Depository
  Loan
  Brokerage
  Other
}

enum AccountRecordSubtype {
  Plan401a
  Plan401k
  Plan403B
  Plan457b
  Plan529
  Brokerage
  CashIsa
  CryptoExchange
  EducationSavingsAccount
  Ebt
  FixedAnnuity
  Gic
  HealthReimbursementArrangement
  Hsa
  Isa
  Ira
  Lif
  LifeInsurance
  Lira
  Lrif
  Lrsp
  NonCustodialWallet
  NonTaxableBrokerageAccount
  Other
  OtherInsurance
  OtherAnnuity
  Prif
  Rdsp
  Resp
  Rlif
  Rrif
  Pension
  ProfitSharingPlan
  Retirement
  Roth
  Roth401k
  Rrsp
  SepIra
  SimpleIra
  Sipp
  StockPlan
  ThriftSavingsPlan
  Tfsa
  Trust
  Ugma
  Utma
  VariableAnnuity
  CreditCard
  Paypal
  Cd
  Checking
  Savings
  MoneyMarket
  Prepaid
  Auto
  Business
  Commercial
  Construction
  Consumer
  HomeEquity
  Loan
  Mortgage
  Overdraft
  LineOfCredit
  Student
  CashManagement
  Keogh
  MutualFund
  Recurring
  Rewards
  SafeDeposit
  Sarsep
  Payroll
  Null
}

enum AccountRecordVerificationStatus {
  AutomaticallyVerified
  PendingAutomaticVerification
  PendingManualVerification
  ManuallyVerified
  VerificationExpired
  VerificationFailed
  DatabaseMatched
}

model AccountRecord {
  id                     String                           @id @default(uuid()) @map("id")
  createdAt              DateTime                         @default(now()) @map("created_at")
  updatedAt              DateTime                         @default(now()) @updatedAt @map("updated_at")
  institutionId          String                           @map("institution_id")
  institution            InstitutionRecord                @relation(fields: [institutionId], references: [id])
  transactions           TransactionRecord[]
  externalId             String                           @unique @map("external_id")
  available              Float?                           @map("available")
  current                Float?                           @map("current")
  limit                  Float?                           @map("limit")
  isoCurrencyCode        String?                          @map("iso_currency_code")
  unofficialCurrencyCode String?                          @map("unofficial_currency_code")
  externalUpdatedAt      DateTime?                        @map("external_updated_at")
  mask                   String?                          @map("mask")
  name                   String                           @map("name")
  officialName           String?                          @map("official_name")
  type                   AccountRecordType                @default(Other) @map("type")
  subtype                AccountRecordSubtype?            @map("subtype")
  verificationStatus     AccountRecordVerificationStatus? @map("verification_status")
  snapshots              AccountSnapshotRecord[]

  @@map("account")
}

// Account Snapshot
model AccountSnapshotRecord {
  id                     String                           @id @default(uuid()) @map("id")
  createdAt              DateTime                         @default(now()) @map("created_at")
  snapshotId             String                           @map("snapshot_id")
  accountId              String                           @map("account_id")
  account                AccountRecord                    @relation(fields: [accountId], references: [id])
  externalId             String                           @map("external_id")
  available              Float?                           @map("available")
  current                Float?                           @map("current")
  limit                  Float?                           @map("limit")
  isoCurrencyCode        String?                          @map("iso_currency_code")
  unofficialCurrencyCode String?                          @map("unofficial_currency_code")
  mask                   String?                          @map("mask")
  name                   String                           @map("name")
  officialName           String?                          @map("official_name")
  type                   AccountRecordType                @default(Other) @map("type")
  subtype                AccountRecordSubtype?            @map("subtype")
  verificationStatus     AccountRecordVerificationStatus? @map("verification_status")

  @@map("account_snapshot")
}

// Transaction
enum TransactionPaymentChannelRecord {
  Online
  InStore
  Other
}

enum TransactionCodeRecord {
  Adjustment
  Atm
  BankCharge
  BillPayment
  Cash
  Cashback
  Cheque
  DirectDebit
  Interest
  Purchase
  StandingOrder
  Transfer
  Null
}

model TransactionRecord {
  id                     String                          @id @default(uuid()) @map("id")
  createdAt              DateTime                        @default(now()) @map("created_at")
  updatedAt              DateTime                        @default(now()) @updatedAt @map("updated_at")
  userId                 String                          @map("user_id")
  user                   UserRecord                      @relation(fields: [userId], references: [id])
  institutionId          String                          @map("institution_id")
  institution            InstitutionRecord               @relation(fields: [institutionId], references: [id])
  accountId              String                          @map("account_id")
  account                AccountRecord                   @relation(fields: [accountId], references: [id])
  externalId             String                          @unique @map("external_id")
  externalAccountId      String                          @map("external_account_id")
  amount                 Float                           @map("amount")
  isoCurrencyCode        String?                         @map("iso_currency_code")
  unofficialCurrencyCode String?                         @map("unofficial_currency_code")
  checkNumber            String?                         @map("check_number")
  date                   DateTime                        @map("date")
  locationId             String                          @map("location_id")
  location               LocationRecord                  @relation(fields: [locationId], references: [id])
  name                   String?                         @map("name")
  merchantName           String?                         @map("merchant_name")
  originalDescription    String?                         @map("original_description")
  pending                Boolean                         @default(false) @map("pending")
  pendingTransactionId   String?                         @map("pending_transaction_id")
  accountOwner           String?                         @map("account_owner")
  logoUrl                String?                         @map("logo_url")
  website                String?                         @map("website")
  authorizedDate         DateTime?                       @map("authorized_date")
  authorizedDatetime     DateTime?                       @map("authorized_datetime")
  datetime               DateTime?                       @map("datetime")
  paymentChannel         TransactionPaymentChannelRecord @default(Other) @map("payment_channel")
  categoryId             String?                         @map("category_id")
  category               CategoryRecord?                 @relation(fields: [categoryId], references: [id])
  code                   TransactionCodeRecord?          @default(Null) @map("code")
  categoryIconUrl        String?                         @map("category_icon_url")
  merchantEntityId       String?                         @map("merchant_entity_id")

  @@map("transaction")
}

model LocationRecord {
  id           String              @id @default(uuid()) @map("id")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @default(now()) @updatedAt @map("updated_at")
  transactions TransactionRecord[]
  address      String?             @map("address")
  city         String?             @map("city")
  region       String?             @map("region")
  postalCode   String?             @map("postal_code")
  country      String?             @map("country")
  lat          Float?              @map("lat")
  lon          Float?              @map("lon")
  storeNumber  String?             @map("store_number")

  @@map("location")
}

model CategoryRecord {
  id              String              @id @default(uuid()) @map("id")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @default(now()) @updatedAt @map("updated_at")
  primary         String              @map("primary")
  detailed        String              @map("detailed")
  confidenceLevel String?             @map("confidence_level")
  transactions    TransactionRecord[]

  @@map("category")
}

// Wallet
model WalletRecord {
  id           String                    @id @default(uuid()) @map("id")
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @default(now()) @updatedAt @map("updated_at")
  userId       String                    @unique @map("user_id")
  user         UserRecord                @relation(fields: [userId], references: [id])
  balance      Int                       @default(0) @map("balance")
  transactions WalletTransactionRecord[]

  @@map("wallet")
}

model WalletTransactionRecord {
  id            String       @id @default(uuid()) @map("id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  transactionId String       @unique @map("transaction_id")
  walletId      String       @map("wallet_id")
  wallet        WalletRecord @relation(fields: [walletId], references: [id])
  amount        Int          @map("amount")

  @@map("wallet_transaction")
}
